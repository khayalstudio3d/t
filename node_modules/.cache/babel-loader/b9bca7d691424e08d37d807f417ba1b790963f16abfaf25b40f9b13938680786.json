{"ast":null,"code":"import React,{useEffect,useState}from'react';import{DragDropContext,Droppable,Draggable}from'react-beautiful-dnd';import axios from'axios';import CryptoJS from'crypto-js';import{useNavigate}from'react-router-dom';// Use useNavigate instead of useHistory\nimport'./DashboardPage.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const DashboardPage=_ref=>{let{id,setIsAuthenticated}=_ref;const[tasks,setTasks]=useState({todo:[],inProgress:[],check:[],finished:[]});const navigate=useNavigate();// Use navigate instead of history\n// Secret key for encryption (should be stored securely)\n// Check if the user is authenticated on component load\n//   useEffect(() => {\n//     // const checkAuth = () => {\n//     //    const notencryptedIsAuth = localStorage.getItem('isAuthenticated');\n//     // //   const encryptedvalue = encryptValue(notencryptedIsAuth);\n//     // //   if (!encryptedvalue) {\n//     // //     console.log(encryptedvalue);\n//     // //     // Redirect to login if not authenticated\n//     // //     navigate('/login');  // Use navigate instead of history.push\n//     // //     return;\n//     // //   }\n//     //   // Decrypt and verify the authentication status\n//     //   const bytes = CryptoJS.AES.decrypt(notencryptedIsAuth, secretKey);\n//     //   const decryptedIsAuth = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n//     //   console.log(decryptedIsAuth);\n//     //   if (!decryptedIsAuth) {\n//     //     console.log(decryptedIsAuth);\n//     //     navigate('/login');  // Use navigate instead of history.push\n//     //   }\n//     // };\n//     checkAuth();\n//   }, [navigate, secretKey]);\n// Fetch tasks for the logged-in user\nuseEffect(()=>{const secretKey='your-secret-key';const authfrombrowser=localStorage.getItem('isAuthenticated');console.log(authfrombrowser);const bytes=CryptoJS.AES.decrypt(authfrombrowser,secretKey);const decryptedauth=JSON.parse(bytes.toString(CryptoJS.enc.Utf8));console.log(decryptedauth);setIsAuthenticated(true);const fetchTasks=async()=>{try{const response=await axios.get(`http://localhost:3001/dashboard?id=${id}`);const taskData=response.data.results;const uniqueTasks=[...new Set(taskData.map(task=>task.task_id))].map(id=>taskData.find(task=>task.task_id===id));// Organize tasks based on their task_status\nconst organizedTasks={todo:[],inProgress:[],check:[],finished:[]};uniqueTasks.forEach(task=>{switch(task.task_status){case 1:organizedTasks.todo.push(task);break;case 2:organizedTasks.inProgress.push(task);break;case 3:organizedTasks.check.push(task);break;case 4:organizedTasks.finished.push(task);break;default:break;}});setTasks(organizedTasks);}catch(error){console.error('Error fetching tasks:',error);}};fetchTasks();},[id]);// Handle drag and drop functionality\nconst handleOnDragEnd=result=>{const{destination,source}=result;if(!destination)return;// If the task is dropped in the same position, do nothing\nif(destination.droppableId===source.droppableId&&destination.index===source.index){return;}const sourceColumn=source.droppableId;const destinationColumn=destination.droppableId;const movedTask=tasks[sourceColumn][source.index];// Prevent dragging from 'check' to 'finished'\nif(sourceColumn==='check'&&destinationColumn==='finished'){return;}// If task is being moved between columns\nif(sourceColumn!==destinationColumn){const updatedSourceTasks=[...tasks[sourceColumn]];const updatedDestinationTasks=[...tasks[destinationColumn]];// Remove from the source and add to the destination\nupdatedSourceTasks.splice(source.index,1);updatedDestinationTasks.splice(destination.index,0,movedTask);setTasks({...tasks,[sourceColumn]:updatedSourceTasks,[destinationColumn]:updatedDestinationTasks});// Optionally, send an API request to update task status on the server\nmovedTask.task_status=getColumnStatus(destinationColumn);axios.put(`http://localhost:3001/dashboard?task_id=${movedTask.task_id}&task_status=${movedTask.task_status}`);}};// Map column IDs to task statuses\nconst getColumnStatus=columnId=>{switch(columnId){case'todo':return 1;case'inProgress':return 2;case'check':return 3;case'finished':return 4;default:return null;}};return/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard\",children:[/*#__PURE__*/_jsx(DragDropContext,{onDragEnd:handleOnDragEnd,children:/*#__PURE__*/_jsxs(\"div\",{className:\"columns\",children:[/*#__PURE__*/_jsx(Droppable,{droppableId:\"todo\",children:provided=>/*#__PURE__*/_jsxs(\"div\",{className:\"column\",ref:provided.innerRef,...provided.droppableProps,children:[/*#__PURE__*/_jsx(\"h2\",{children:\"To Do\"}),tasks.todo.map((task,index)=>/*#__PURE__*/_jsx(Draggable,{draggableId:String(task.task_id),index:index,children:provided=>/*#__PURE__*/_jsx(\"div\",{className:\"card\",ref:provided.innerRef,...provided.draggableProps,...provided.dragHandleProps,children:/*#__PURE__*/_jsx(\"div\",{className:\"card-body\",children:/*#__PURE__*/_jsx(\"h5\",{className:\"card-title\",children:task.task_name})})})},task.task_id)),provided.placeholder]})}),/*#__PURE__*/_jsx(Droppable,{droppableId:\"inProgress\",children:provided=>/*#__PURE__*/_jsxs(\"div\",{className:\"column\",ref:provided.innerRef,...provided.droppableProps,children:[/*#__PURE__*/_jsx(\"h2\",{children:\"In Progress\"}),tasks.inProgress.map((task,index)=>/*#__PURE__*/_jsx(Draggable,{draggableId:String(task.task_id),index:index,children:provided=>/*#__PURE__*/_jsx(\"div\",{className:\"card\",ref:provided.innerRef,...provided.draggableProps,...provided.dragHandleProps,children:/*#__PURE__*/_jsx(\"div\",{className:\"card-body\",children:/*#__PURE__*/_jsx(\"h5\",{className:\"card-title\",children:task.task_name})})})},task.task_id)),provided.placeholder]})}),/*#__PURE__*/_jsx(Droppable,{droppableId:\"check\",children:provided=>/*#__PURE__*/_jsxs(\"div\",{className:\"column\",ref:provided.innerRef,...provided.droppableProps,children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Check\"}),tasks.check.map((task,index)=>/*#__PURE__*/_jsx(Draggable,{draggableId:String(task.task_id),index:index,children:provided=>/*#__PURE__*/_jsx(\"div\",{className:\"card\",ref:provided.innerRef,...provided.draggableProps,...provided.dragHandleProps,children:/*#__PURE__*/_jsx(\"div\",{className:\"card-body\",children:/*#__PURE__*/_jsx(\"h5\",{className:\"card-title\",children:task.task_name})})})},task.task_id)),provided.placeholder]})}),/*#__PURE__*/_jsx(Droppable,{droppableId:\"finished\",children:provided=>/*#__PURE__*/_jsxs(\"div\",{className:\"column\",ref:provided.innerRef,...provided.droppableProps,children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Finished\"}),tasks.finished.map((task,index)=>/*#__PURE__*/_jsx(Draggable,{draggableId:String(task.task_id),index:index,children:provided=>/*#__PURE__*/_jsx(\"div\",{className:\"card\",ref:provided.innerRef,...provided.draggableProps,...provided.dragHandleProps,children:/*#__PURE__*/_jsx(\"div\",{className:\"card-body\",children:/*#__PURE__*/_jsx(\"h5\",{className:\"card-title\",children:task.task_name})})})},task.task_id)),provided.placeholder]})})]})}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setIsAuthenticated(false),children:\"Logout\"})]});};export default DashboardPage;","map":{"version":3,"names":["React","useEffect","useState","DragDropContext","Droppable","Draggable","axios","CryptoJS","useNavigate","jsx","_jsx","jsxs","_jsxs","DashboardPage","_ref","id","setIsAuthenticated","tasks","setTasks","todo","inProgress","check","finished","navigate","secretKey","authfrombrowser","localStorage","getItem","console","log","bytes","AES","decrypt","decryptedauth","JSON","parse","toString","enc","Utf8","fetchTasks","response","get","taskData","data","results","uniqueTasks","Set","map","task","task_id","find","organizedTasks","forEach","task_status","push","error","handleOnDragEnd","result","destination","source","droppableId","index","sourceColumn","destinationColumn","movedTask","updatedSourceTasks","updatedDestinationTasks","splice","getColumnStatus","put","columnId","className","children","onDragEnd","provided","ref","innerRef","droppableProps","draggableId","String","draggableProps","dragHandleProps","task_name","placeholder","onClick"],"sources":["C:/Users/pc/Desktop/react projects/first project/first_project/src/DashboardPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport axios from 'axios';\r\nimport CryptoJS from 'crypto-js';\r\nimport { useNavigate } from 'react-router-dom';  // Use useNavigate instead of useHistory\r\nimport './DashboardPage.css';\r\n\r\nconst DashboardPage = ({ id, setIsAuthenticated }) => {\r\n  const [tasks, setTasks] = useState({\r\n    todo: [],\r\n    inProgress: [],\r\n    check: [],\r\n    finished: [],\r\n  });\r\n\r\n \r\n\r\n  const navigate = useNavigate();  // Use navigate instead of history\r\n\r\n  // Secret key for encryption (should be stored securely)\r\n\r\n  // Check if the user is authenticated on component load\r\n//   useEffect(() => {\r\n//     // const checkAuth = () => {\r\n//     //    const notencryptedIsAuth = localStorage.getItem('isAuthenticated');\r\n//     // //   const encryptedvalue = encryptValue(notencryptedIsAuth);\r\n//     // //   if (!encryptedvalue) {\r\n//     // //     console.log(encryptedvalue);\r\n//     // //     // Redirect to login if not authenticated\r\n//     // //     navigate('/login');  // Use navigate instead of history.push\r\n//     // //     return;\r\n//     // //   }\r\n\r\n//     //   // Decrypt and verify the authentication status\r\n//     //   const bytes = CryptoJS.AES.decrypt(notencryptedIsAuth, secretKey);\r\n//     //   const decryptedIsAuth = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\r\n//     //   console.log(decryptedIsAuth);\r\n\r\n//     //   if (!decryptedIsAuth) {\r\n//     //     console.log(decryptedIsAuth);\r\n        \r\n//     //     navigate('/login');  // Use navigate instead of history.push\r\n//     //   }\r\n//     // };\r\n\r\n//     checkAuth();\r\n//   }, [navigate, secretKey]);\r\n\r\n  // Fetch tasks for the logged-in user\r\n  useEffect(() => {\r\n    const secretKey = 'your-secret-key';\r\n    \r\n    const authfrombrowser = localStorage.getItem('isAuthenticated');\r\n    console.log(authfrombrowser);\r\n\r\n    const bytes = CryptoJS.AES.decrypt(authfrombrowser, secretKey);\r\n    const decryptedauth = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\r\n    console.log(decryptedauth);\r\n\r\n    \r\n    \r\n       \r\n    \r\n    setIsAuthenticated(true);\r\n    const fetchTasks = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:3001/dashboard?id=${id}`);\r\n        const taskData = response.data.results;\r\n        const uniqueTasks = [...new Set(taskData.map(task => task.task_id))].map(id =>\r\n            taskData.find(task => task.task_id === id)\r\n          );\r\n  \r\n          // Organize tasks based on their task_status\r\n          const organizedTasks = {\r\n            todo: [],\r\n            inProgress: [],\r\n            check: [],\r\n            finished: [],\r\n          };\r\n  \r\n          uniqueTasks.forEach(task => {\r\n            switch (task.task_status) {\r\n              case 1:\r\n                organizedTasks.todo.push(task);\r\n                break;\r\n              case 2:\r\n                organizedTasks.inProgress.push(task);\r\n                break;\r\n              case 3:\r\n                organizedTasks.check.push(task);\r\n                break;\r\n              case 4:\r\n                organizedTasks.finished.push(task);\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          });\r\n  \r\n          setTasks(organizedTasks);\r\n        } catch (error) {\r\n          console.error('Error fetching tasks:', error);\r\n        }\r\n      };\r\n  \r\n      fetchTasks();\r\n    }, [id]);\r\n  \r\n    // Handle drag and drop functionality\r\n    const handleOnDragEnd = (result) => {\r\n      const { destination, source } = result;\r\n  \r\n      if (!destination) return;\r\n  \r\n      // If the task is dropped in the same position, do nothing\r\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\r\n        return;\r\n      }\r\n  \r\n      const sourceColumn = source.droppableId;\r\n      const destinationColumn = destination.droppableId;\r\n  \r\n      const movedTask = tasks[sourceColumn][source.index];\r\n  \r\n      // Prevent dragging from 'check' to 'finished'\r\n      if (sourceColumn === 'check' && destinationColumn === 'finished') {\r\n        return;\r\n      }\r\n  \r\n      // If task is being moved between columns\r\n      if (sourceColumn !== destinationColumn) {\r\n        const updatedSourceTasks = [...tasks[sourceColumn]];\r\n        const updatedDestinationTasks = [...tasks[destinationColumn]];\r\n  \r\n        // Remove from the source and add to the destination\r\n        updatedSourceTasks.splice(source.index, 1);\r\n        updatedDestinationTasks.splice(destination.index, 0, movedTask);\r\n  \r\n        setTasks({\r\n          ...tasks,\r\n          [sourceColumn]: updatedSourceTasks,\r\n          [destinationColumn]: updatedDestinationTasks,\r\n        });\r\n  \r\n        // Optionally, send an API request to update task status on the server\r\n        movedTask.task_status = getColumnStatus(destinationColumn);\r\n        axios.put(`http://localhost:3001/dashboard?task_id=${movedTask.task_id}&task_status=${movedTask.task_status}`);\r\n      }\r\n    };\r\n  \r\n    // Map column IDs to task statuses\r\n    const getColumnStatus = (columnId) => {\r\n      switch (columnId) {\r\n        case 'todo':\r\n          return 1;\r\n        case 'inProgress':\r\n          return 2;\r\n        case 'check':\r\n          return 3;\r\n        case 'finished':\r\n          return 4;\r\n        default:\r\n          return null;\r\n      }\r\n    };\r\n  \r\n    return (\r\n      <div className=\"dashboard\">\r\n        <DragDropContext onDragEnd={handleOnDragEnd}>\r\n          <div className=\"columns\">\r\n            {/* To Do Column */}\r\n            <Droppable droppableId=\"todo\">\r\n              {(provided) => (\r\n                <div className=\"column\" ref={provided.innerRef} {...provided.droppableProps}>\r\n                  <h2>To Do</h2>\r\n                  {tasks.todo.map((task, index) => (\r\n                    <Draggable key={task.task_id} draggableId={String(task.task_id)} index={index}>\r\n                      {(provided) => (\r\n                        <div\r\n                          className=\"card\"\r\n                          ref={provided.innerRef}\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                        >\r\n                          <div className=\"card-body\">\r\n                            <h5 className=\"card-title\">{task.task_name}</h5>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </Draggable>\r\n                  ))}\r\n                  {provided.placeholder}\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n  \r\n            {/* In Progress Column */}\r\n            <Droppable droppableId=\"inProgress\">\r\n              {(provided) => (\r\n                <div className=\"column\" ref={provided.innerRef} {...provided.droppableProps}>\r\n                  <h2>In Progress</h2>\r\n                  {tasks.inProgress.map((task, index) => (\r\n                    <Draggable key={task.task_id} draggableId={String(task.task_id)} index={index}>\r\n                      {(provided) => (\r\n                        <div\r\n                          className=\"card\"\r\n                          ref={provided.innerRef}\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                        >\r\n                          <div className=\"card-body\">\r\n                            <h5 className=\"card-title\">{task.task_name}</h5>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </Draggable>\r\n                  ))}\r\n                  {provided.placeholder}\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n  \r\n            {/* Check Column */}\r\n            <Droppable droppableId=\"check\">\r\n              {(provided) => (\r\n                <div className=\"column\" ref={provided.innerRef} {...provided.droppableProps}>\r\n                  <h2>Check</h2>\r\n                  {tasks.check.map((task, index) => (\r\n                    <Draggable key={task.task_id} draggableId={String(task.task_id)} index={index}>\r\n                      {(provided) => (\r\n                        <div\r\n                          className=\"card\"\r\n                          ref={provided.innerRef}\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                        >\r\n                          <div className=\"card-body\">\r\n                            <h5 className=\"card-title\">{task.task_name}</h5>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </Draggable>\r\n                  ))}\r\n                  {provided.placeholder}\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n  \r\n            {/* Finished Column */}\r\n            <Droppable droppableId=\"finished\">\r\n              {(provided) => (\r\n                <div className=\"column\" ref={provided.innerRef} {...provided.droppableProps}>\r\n                  <h2>Finished</h2>\r\n                  {tasks.finished.map((task, index) => (\r\n                    <Draggable key={task.task_id} draggableId={String(task.task_id)} index={index}>\r\n                      {(provided) => (\r\n                        <div\r\n                          className=\"card\"\r\n                          ref={provided.innerRef}\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                        >\r\n                          <div className=\"card-body\">\r\n                            <h5 className=\"card-title\">{task.task_name}</h5>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </Draggable>\r\n                  ))}\r\n                  {provided.placeholder}\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n          </div>\r\n        </DragDropContext>\r\n        <button onClick={() => setIsAuthenticated(false)}>Logout</button>\r\n      </div>\r\n    );\r\n  };\r\n\r\nexport default DashboardPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}