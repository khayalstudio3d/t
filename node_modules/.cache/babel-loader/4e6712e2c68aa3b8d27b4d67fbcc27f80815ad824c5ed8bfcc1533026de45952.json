{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\react projects\\\\first project\\\\first_project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport LoginPage from './LoginPage';\nimport DashboardPage from './DashboardPage';\nimport CryptoJS from 'crypto-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SECRET_KEY = 'your-secret-key'; // Use a strong secret key\n\nfunction App() {\n  _s();\n  // Function to encrypt the value\n  const encryptValue = value => {\n    return CryptoJS.AES.encrypt(value, SECRET_KEY).toString();\n  };\n\n  // Function to decrypt the value\n  const decryptValue = ciphertext => {\n    const bytes = CryptoJS.AES.decrypt(ciphertext, SECRET_KEY);\n    return bytes.toString(CryptoJS.enc.Utf8);\n  };\n\n  // Initialize authentication state\n  const [isAuthenticated, setIsAuthenticated] = useState(() => {\n    const storedValue = localStorage.getItem('isAuthenticated');\n    return storedValue ? decryptValue(storedValue) === 'true' : false;\n  });\n\n  // Update localStorage whenever authentication state changes\n  useEffect(() => {\n    localStorage.setItem('isAuthenticated', encryptValue(isAuthenticated.toString()));\n  }, [isAuthenticated]);\n  const [id, setId] = useState(null);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/dashboard\",\n        element: isAuthenticated ? /*#__PURE__*/_jsxDEV(DashboardPage, {\n          outid: outid,\n          setIsAuthenticated: setIsAuthenticated\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(LoginPage, {\n          setoutId: setId,\n          setIsAuthenticated: setIsAuthenticated\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rxaKqIS2llCunIEQicOiPPvMy1Q=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","Navigate","LoginPage","DashboardPage","CryptoJS","jsxDEV","_jsxDEV","SECRET_KEY","App","_s","encryptValue","value","AES","encrypt","toString","decryptValue","ciphertext","bytes","decrypt","enc","Utf8","isAuthenticated","setIsAuthenticated","storedValue","localStorage","getItem","setItem","id","setId","children","path","element","outid","fileName","_jsxFileName","lineNumber","columnNumber","to","setoutId","_c","$RefreshReg$"],"sources":["C:/Users/pc/Desktop/react projects/first project/first_project/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport LoginPage from './LoginPage';\nimport DashboardPage from './DashboardPage';\nimport CryptoJS from 'crypto-js';\n\nconst SECRET_KEY = 'your-secret-key'; // Use a strong secret key\n\nfunction App() {\n  // Function to encrypt the value\n  const encryptValue = (value) => {\n    return CryptoJS.AES.encrypt(value, SECRET_KEY).toString();\n  };\n\n  // Function to decrypt the value\n  const decryptValue = (ciphertext) => {\n    const bytes = CryptoJS.AES.decrypt(ciphertext, SECRET_KEY);\n    return bytes.toString(CryptoJS.enc.Utf8);\n  };\n\n  // Initialize authentication state\n  const [isAuthenticated, setIsAuthenticated] = useState(() => {\n    const storedValue = localStorage.getItem('isAuthenticated');\n    return storedValue ? decryptValue(storedValue) === 'true' : false;\n  });\n\n  // Update localStorage whenever authentication state changes\n  useEffect(() => {\n    localStorage.setItem('isAuthenticated', encryptValue(isAuthenticated.toString()));\n  }, [isAuthenticated]);\n  const [id, setId] = useState(null);\n\n\n  return (\n    <Router>\n      <Routes>\n        {/* Protect the dashboard route */}\n        <Route\n          path=\"/dashboard\"\n          element={\n            isAuthenticated ? (\n              <DashboardPage outid={outid} setIsAuthenticated={setIsAuthenticated} />\n            ) : (\n              <Navigate to=\"/\" />\n            )\n          }\n        />\n        \n        {/* Login route */}\n        <Route\n          path=\"/\"\n          element={<LoginPage setoutId={setId} setIsAuthenticated={setIsAuthenticated} />}\n        />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AACnF,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,QAAQ,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,UAAU,GAAG,iBAAiB,CAAC,CAAC;;AAEtC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAMC,YAAY,GAAIC,KAAK,IAAK;IAC9B,OAAOP,QAAQ,CAACQ,GAAG,CAACC,OAAO,CAACF,KAAK,EAAEJ,UAAU,CAAC,CAACO,QAAQ,CAAC,CAAC;EAC3D,CAAC;;EAED;EACA,MAAMC,YAAY,GAAIC,UAAU,IAAK;IACnC,MAAMC,KAAK,GAAGb,QAAQ,CAACQ,GAAG,CAACM,OAAO,CAACF,UAAU,EAAET,UAAU,CAAC;IAC1D,OAAOU,KAAK,CAACH,QAAQ,CAACV,QAAQ,CAACe,GAAG,CAACC,IAAI,CAAC;EAC1C,CAAC;;EAED;EACA,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAG3B,QAAQ,CAAC,MAAM;IAC3D,MAAM4B,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IAC3D,OAAOF,WAAW,GAAGR,YAAY,CAACQ,WAAW,CAAC,KAAK,MAAM,GAAG,KAAK;EACnE,CAAC,CAAC;;EAEF;EACA3B,SAAS,CAAC,MAAM;IACd4B,YAAY,CAACE,OAAO,CAAC,iBAAiB,EAAEhB,YAAY,CAACW,eAAe,CAACP,QAAQ,CAAC,CAAC,CAAC,CAAC;EACnF,CAAC,EAAE,CAACO,eAAe,CAAC,CAAC;EACrB,MAAM,CAACM,EAAE,EAAEC,KAAK,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EAGlC,oBACEW,OAAA,CAACR,MAAM;IAAA+B,QAAA,eACLvB,OAAA,CAACP,MAAM;MAAA8B,QAAA,gBAELvB,OAAA,CAACN,KAAK;QACJ8B,IAAI,EAAC,YAAY;QACjBC,OAAO,EACLV,eAAe,gBACbf,OAAA,CAACH,aAAa;UAAC6B,KAAK,EAAEA,KAAM;UAACV,kBAAkB,EAAEA;QAAmB;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,gBAEvE9B,OAAA,CAACL,QAAQ;UAACoC,EAAE,EAAC;QAAG;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAErB;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eAGF9B,OAAA,CAACN,KAAK;QACJ8B,IAAI,EAAC,GAAG;QACRC,OAAO,eAAEzB,OAAA,CAACJ,SAAS;UAACoC,QAAQ,EAAEV,KAAM;UAACN,kBAAkB,EAAEA;QAAmB;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEb;AAAC3B,EAAA,CAhDQD,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AAkDZ,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}