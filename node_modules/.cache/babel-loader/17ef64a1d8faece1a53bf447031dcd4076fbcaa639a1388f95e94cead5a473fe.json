{"ast":null,"code":"import React,{useState,useEffect}from'react';import{BrowserRouter as Router,Routes,Route,Navigate}from'react-router-dom';import LoginPage from'./LoginPage';import DashboardPage from'./DashboardPage';import CryptoJS from'crypto-js';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SECRET_KEY='your-secret-key';// Use a strong secret key\nfunction App(){// Function to encrypt the value\nconst encryptValue=value=>{return CryptoJS.AES.encrypt(value,SECRET_KEY).toString();};// Function to decrypt the value\nconst decryptValue=ciphertext=>{const bytes=CryptoJS.AES.decrypt(ciphertext,SECRET_KEY);return bytes.toString(CryptoJS.enc.Utf8);};// Initialize authentication state\nconst[isAuthenticated,setIsAuthenticated]=useState(()=>{const storedValue=localStorage.getItem('isAuthenticated');return storedValue?decryptValue(storedValue)==='true':false;});// Update localStorage whenever authentication state changes\nuseEffect(()=>{localStorage.setItem('isAuthenticated',encryptValue(isAuthenticated.toString()));},[isAuthenticated]);const[id,setId]=useState(null);return/*#__PURE__*/_jsx(Router,{children:/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/dashboard\",element:isAuthenticated?/*#__PURE__*/_jsx(DashboardPage,{id:id,setIsAuthenticated:setIsAuthenticated}):/*#__PURE__*/_jsx(Navigate,{to:\"/\"})}),/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(LoginPage,{setoutId:setId,setIsAuthenticated:setIsAuthenticated})})]})});}export default App;","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","Navigate","LoginPage","DashboardPage","CryptoJS","jsx","_jsx","jsxs","_jsxs","SECRET_KEY","App","encryptValue","value","AES","encrypt","toString","decryptValue","ciphertext","bytes","decrypt","enc","Utf8","isAuthenticated","setIsAuthenticated","storedValue","localStorage","getItem","setItem","id","setId","children","path","element","to","setoutId"],"sources":["C:/Users/pc/Desktop/react projects/first project/first_project/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport LoginPage from './LoginPage';\nimport DashboardPage from './DashboardPage';\nimport CryptoJS from 'crypto-js';\n\nconst SECRET_KEY = 'your-secret-key'; // Use a strong secret key\n\nfunction App() {\n  // Function to encrypt the value\n  const encryptValue = (value) => {\n    return CryptoJS.AES.encrypt(value, SECRET_KEY).toString();\n  };\n\n  // Function to decrypt the value\n  const decryptValue = (ciphertext) => {\n    const bytes = CryptoJS.AES.decrypt(ciphertext, SECRET_KEY);\n    return bytes.toString(CryptoJS.enc.Utf8);\n  };\n\n  // Initialize authentication state\n  const [isAuthenticated, setIsAuthenticated] = useState(() => {\n    const storedValue = localStorage.getItem('isAuthenticated');\n    return storedValue ? decryptValue(storedValue) === 'true' : false;\n  });\n\n  // Update localStorage whenever authentication state changes\n  useEffect(() => {\n    localStorage.setItem('isAuthenticated', encryptValue(isAuthenticated.toString()));\n  }, [isAuthenticated]);\n  const [id, setId] = useState(null);\n\n\n  return (\n    <Router>\n      <Routes>\n        {/* Protect the dashboard route */}\n        <Route\n          path=\"/dashboard\"\n          element={\n            isAuthenticated ? (\n              <DashboardPage id={id} setIsAuthenticated={setIsAuthenticated} />\n            ) : (\n              <Navigate to=\"/\" />\n            )\n          }\n        />\n        \n        {/* Login route */}\n        <Route\n          path=\"/\"\n          element={<LoginPage setoutId={setId} setIsAuthenticated={setIsAuthenticated} />}\n        />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,aAAa,GAAI,CAAAC,MAAM,CAAEC,MAAM,CAAEC,KAAK,CAAEC,QAAQ,KAAQ,kBAAkB,CACnF,MAAO,CAAAC,SAAS,KAAM,aAAa,CACnC,MAAO,CAAAC,aAAa,KAAM,iBAAiB,CAC3C,MAAO,CAAAC,QAAQ,KAAM,WAAW,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEjC,KAAM,CAAAC,UAAU,CAAG,iBAAiB,CAAE;AAEtC,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb;AACA,KAAM,CAAAC,YAAY,CAAIC,KAAK,EAAK,CAC9B,MAAO,CAAAR,QAAQ,CAACS,GAAG,CAACC,OAAO,CAACF,KAAK,CAAEH,UAAU,CAAC,CAACM,QAAQ,CAAC,CAAC,CAC3D,CAAC,CAED;AACA,KAAM,CAAAC,YAAY,CAAIC,UAAU,EAAK,CACnC,KAAM,CAAAC,KAAK,CAAGd,QAAQ,CAACS,GAAG,CAACM,OAAO,CAACF,UAAU,CAAER,UAAU,CAAC,CAC1D,MAAO,CAAAS,KAAK,CAACH,QAAQ,CAACX,QAAQ,CAACgB,GAAG,CAACC,IAAI,CAAC,CAC1C,CAAC,CAED;AACA,KAAM,CAACC,eAAe,CAAEC,kBAAkB,CAAC,CAAG5B,QAAQ,CAAC,IAAM,CAC3D,KAAM,CAAA6B,WAAW,CAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,CAC3D,MAAO,CAAAF,WAAW,CAAGR,YAAY,CAACQ,WAAW,CAAC,GAAK,MAAM,CAAG,KAAK,CACnE,CAAC,CAAC,CAEF;AACA5B,SAAS,CAAC,IAAM,CACd6B,YAAY,CAACE,OAAO,CAAC,iBAAiB,CAAEhB,YAAY,CAACW,eAAe,CAACP,QAAQ,CAAC,CAAC,CAAC,CAAC,CACnF,CAAC,CAAE,CAACO,eAAe,CAAC,CAAC,CACrB,KAAM,CAACM,EAAE,CAAEC,KAAK,CAAC,CAAGlC,QAAQ,CAAC,IAAI,CAAC,CAGlC,mBACEW,IAAA,CAACR,MAAM,EAAAgC,QAAA,cACLtB,KAAA,CAACT,MAAM,EAAA+B,QAAA,eAELxB,IAAA,CAACN,KAAK,EACJ+B,IAAI,CAAC,YAAY,CACjBC,OAAO,CACLV,eAAe,cACbhB,IAAA,CAACH,aAAa,EAACyB,EAAE,CAAEA,EAAG,CAACL,kBAAkB,CAAEA,kBAAmB,CAAE,CAAC,cAEjEjB,IAAA,CAACL,QAAQ,EAACgC,EAAE,CAAC,GAAG,CAAE,CAErB,CACF,CAAC,cAGF3B,IAAA,CAACN,KAAK,EACJ+B,IAAI,CAAC,GAAG,CACRC,OAAO,cAAE1B,IAAA,CAACJ,SAAS,EAACgC,QAAQ,CAAEL,KAAM,CAACN,kBAAkB,CAAEA,kBAAmB,CAAE,CAAE,CACjF,CAAC,EACI,CAAC,CACH,CAAC,CAEb,CAEA,cAAe,CAAAb,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}