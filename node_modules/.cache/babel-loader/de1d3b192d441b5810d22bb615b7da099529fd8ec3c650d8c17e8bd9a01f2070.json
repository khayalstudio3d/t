{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\react projects\\\\first project\\\\first_project\\\\src\\\\DashboardPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport axios from 'axios';\nimport CryptoJS from 'crypto-js';\nimport { useNavigate } from 'react-router-dom'; // Use useNavigate instead of useHistory\nimport './DashboardPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardPage = ({\n  id,\n  setIsAuthenticated\n}) => {\n  _s();\n  const [tasks, setTasks] = useState({\n    todo: [],\n    inProgress: [],\n    check: [],\n    finished: []\n  });\n  const navigate = useNavigate(); // Use navigate instead of history\n\n  // Secret key for encryption (should be stored securely)\n\n  // Check if the user is authenticated on component load\n  //   useEffect(() => {\n  //     // const checkAuth = () => {\n  //     //    const notencryptedIsAuth = localStorage.getItem('isAuthenticated');\n  //     // //   const encryptedvalue = encryptValue(notencryptedIsAuth);\n  //     // //   if (!encryptedvalue) {\n  //     // //     console.log(encryptedvalue);\n  //     // //     // Redirect to login if not authenticated\n  //     // //     navigate('/login');  // Use navigate instead of history.push\n  //     // //     return;\n  //     // //   }\n\n  //     //   // Decrypt and verify the authentication status\n  //     //   const bytes = CryptoJS.AES.decrypt(notencryptedIsAuth, secretKey);\n  //     //   const decryptedIsAuth = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n  //     //   console.log(decryptedIsAuth);\n\n  //     //   if (!decryptedIsAuth) {\n  //     //     console.log(decryptedIsAuth);\n\n  //     //     navigate('/login');  // Use navigate instead of history.push\n  //     //   }\n  //     // };\n\n  //     checkAuth();\n  //   }, [navigate, secretKey]);\n\n  // Fetch tasks for the logged-in user\n  useEffect(() => {\n    const secretKey = 'your-secret-key';\n    const authfrombrowser = localStorage.getItem('isAuthenticated');\n    console.log(authfrombrowser);\n    const bytes = CryptoJS.AES.decrypt(authfrombrowser, secretKey);\n    const decryptedauth = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    console.log(decryptedauth);\n    setIsAuthenticated(true);\n    const fetchTasks = async () => {\n      try {\n        const response = await axios.get(`http://localhost:3001/dashboard?id=${id}`);\n        const taskData = response.data.results;\n        const uniqueTasks = [...new Set(taskData.map(task => task.task_id))].map(id => taskData.find(task => task.task_id === id));\n\n        // Organize tasks based on their task_status\n        const organizedTasks = {\n          todo: [],\n          inProgress: [],\n          check: [],\n          finished: []\n        };\n        taskData.forEach(task => {\n          switch (task.task_status) {\n            case 1:\n              organizedTasks.todo.push(task);\n              break;\n            case 2:\n              organizedTasks.inProgress.push(task);\n              break;\n            case 3:\n              organizedTasks.check.push(task);\n              break;\n            case 4:\n              organizedTasks.finished.push(task);\n              break;\n            default:\n              break;\n          }\n        });\n        setTasks(organizedTasks);\n      } catch (error) {\n        console.error('Error fetching tasks:', error);\n      }\n    };\n    fetchTasks();\n  }, [id]);\n\n  // Handle drag and drop functionality\n  const handleOnDragEnd = result => {\n    const {\n      destination,\n      source\n    } = result;\n    if (!destination) return;\n\n    // If the task is dropped in the same position, do nothing\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n    const sourceColumn = source.droppableId;\n    const destinationColumn = destination.droppableId;\n    const movedTask = tasks[sourceColumn][source.index];\n\n    // Prevent dragging from 'check' to 'finished'\n    if (sourceColumn === 'check' && destinationColumn === 'finished') {\n      return;\n    }\n\n    // If task is being moved between columns\n    if (sourceColumn !== destinationColumn) {\n      const updatedSourceTasks = [...tasks[sourceColumn]];\n      const updatedDestinationTasks = [...tasks[destinationColumn]];\n\n      // Remove from the source and add to the destination\n      updatedSourceTasks.splice(source.index, 1);\n      updatedDestinationTasks.splice(destination.index, 0, movedTask);\n      setTasks({\n        ...tasks,\n        [sourceColumn]: updatedSourceTasks,\n        [destinationColumn]: updatedDestinationTasks\n      });\n\n      // Optionally, send an API request to update task status on the server\n      movedTask.task_status = getColumnStatus(destinationColumn);\n      axios.put(`http://localhost:3001/dashboard?task_id=${movedTask.task_id}&task_status=${movedTask.task_status}`);\n    }\n  };\n\n  // Map column IDs to task statuses\n  const getColumnStatus = columnId => {\n    switch (columnId) {\n      case 'todo':\n        return 1;\n      case 'inProgress':\n        return 2;\n      case 'check':\n        return 3;\n      case 'finished':\n        return 4;\n      default:\n        return null;\n    }\n  };\n\n  // Handle logout by clearing localStorage and redirecting to login\n  const handleLogout = () => {\n    localStorage.removeItem('isAuthenticated');\n    setIsAuthenticated(false); // This will redirect the user to the login page\n    navigate('/login'); // Use navigate instead of history.push\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: handleOnDragEnd,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"columns\",\n        children: [/*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"todo\",\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"column\",\n            ref: provided.innerRef,\n            ...provided.droppableProps,\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"To Do\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 17\n            }, this), tasks.todo.map((task, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: String(task.task_id),\n              index: index,\n              children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card\",\n                ref: provided.innerRef,\n                ...provided.draggableProps,\n                ...provided.dragHandleProps,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-body\",\n                  children: /*#__PURE__*/_jsxDEV(\"h5\", {\n                    className: \"card-title\",\n                    children: task.task_name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 193,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 192,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 23\n              }, this)\n            }, task.task_id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 19\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"inProgress\",\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"column\",\n            ref: provided.innerRef,\n            ...provided.droppableProps,\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"In Progress\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 17\n            }, this), tasks.inProgress.map((task, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: String(task.task_id),\n              index: index,\n              children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card\",\n                ref: provided.innerRef,\n                ...provided.draggableProps,\n                ...provided.dragHandleProps,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-body\",\n                  children: /*#__PURE__*/_jsxDEV(\"h5\", {\n                    className: \"card-title\",\n                    children: task.task_name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 219,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 218,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 23\n              }, this)\n            }, task.task_id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 19\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"check\",\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"column\",\n            ref: provided.innerRef,\n            ...provided.droppableProps,\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Check\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 17\n            }, this), tasks.check.map((task, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: String(task.task_id),\n              index: index,\n              children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card\",\n                ref: provided.innerRef,\n                ...provided.draggableProps,\n                ...provided.dragHandleProps,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-body\",\n                  children: /*#__PURE__*/_jsxDEV(\"h5\", {\n                    className: \"card-title\",\n                    children: task.task_name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 245,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 244,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 23\n              }, this)\n            }, task.task_id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 19\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"finished\",\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"column\",\n            ref: provided.innerRef,\n            ...provided.droppableProps,\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Finished\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 17\n            }, this), tasks.finished.map((task, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: String(task.task_id),\n              index: index,\n              children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card\",\n                ref: provided.innerRef,\n                ...provided.draggableProps,\n                ...provided.dragHandleProps,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-body\",\n                  children: /*#__PURE__*/_jsxDEV(\"h5\", {\n                    className: \"card-title\",\n                    children: task.task_name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 271,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 270,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 23\n              }, this)\n            }, task.task_id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 19\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsAuthenticated(false),\n      children: \"Logout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n};\n_s(DashboardPage, \"NpG/PBpM/J8gZnof1RaKW/tyYak=\", false, function () {\n  return [useNavigate];\n});\n_c = DashboardPage;\nexport default DashboardPage;\nvar _c;\n$RefreshReg$(_c, \"DashboardPage\");","map":{"version":3,"names":["React","useEffect","useState","DragDropContext","Droppable","Draggable","axios","CryptoJS","useNavigate","jsxDEV","_jsxDEV","DashboardPage","id","setIsAuthenticated","_s","tasks","setTasks","todo","inProgress","check","finished","navigate","secretKey","authfrombrowser","localStorage","getItem","console","log","bytes","AES","decrypt","decryptedauth","JSON","parse","toString","enc","Utf8","fetchTasks","response","get","taskData","data","results","uniqueTasks","Set","map","task","task_id","find","organizedTasks","forEach","task_status","push","error","handleOnDragEnd","result","destination","source","droppableId","index","sourceColumn","destinationColumn","movedTask","updatedSourceTasks","updatedDestinationTasks","splice","getColumnStatus","put","columnId","handleLogout","removeItem","className","children","onDragEnd","provided","ref","innerRef","droppableProps","fileName","_jsxFileName","lineNumber","columnNumber","draggableId","String","draggableProps","dragHandleProps","task_name","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/pc/Desktop/react projects/first project/first_project/src/DashboardPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport axios from 'axios';\r\nimport CryptoJS from 'crypto-js';\r\nimport { useNavigate } from 'react-router-dom';  // Use useNavigate instead of useHistory\r\nimport './DashboardPage.css';\r\n\r\nconst DashboardPage = ({ id, setIsAuthenticated }) => {\r\n  const [tasks, setTasks] = useState({\r\n    todo: [],\r\n    inProgress: [],\r\n    check: [],\r\n    finished: [],\r\n  });\r\n\r\n \r\n\r\n  const navigate = useNavigate();  // Use navigate instead of history\r\n\r\n  // Secret key for encryption (should be stored securely)\r\n\r\n  // Check if the user is authenticated on component load\r\n//   useEffect(() => {\r\n//     // const checkAuth = () => {\r\n//     //    const notencryptedIsAuth = localStorage.getItem('isAuthenticated');\r\n//     // //   const encryptedvalue = encryptValue(notencryptedIsAuth);\r\n//     // //   if (!encryptedvalue) {\r\n//     // //     console.log(encryptedvalue);\r\n//     // //     // Redirect to login if not authenticated\r\n//     // //     navigate('/login');  // Use navigate instead of history.push\r\n//     // //     return;\r\n//     // //   }\r\n\r\n//     //   // Decrypt and verify the authentication status\r\n//     //   const bytes = CryptoJS.AES.decrypt(notencryptedIsAuth, secretKey);\r\n//     //   const decryptedIsAuth = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\r\n//     //   console.log(decryptedIsAuth);\r\n\r\n//     //   if (!decryptedIsAuth) {\r\n//     //     console.log(decryptedIsAuth);\r\n        \r\n//     //     navigate('/login');  // Use navigate instead of history.push\r\n//     //   }\r\n//     // };\r\n\r\n//     checkAuth();\r\n//   }, [navigate, secretKey]);\r\n\r\n  // Fetch tasks for the logged-in user\r\n  useEffect(() => {\r\n    const secretKey = 'your-secret-key';\r\n    \r\n    const authfrombrowser = localStorage.getItem('isAuthenticated');\r\n    console.log(authfrombrowser);\r\n\r\n    const bytes = CryptoJS.AES.decrypt(authfrombrowser, secretKey);\r\n    const decryptedauth = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\r\n    console.log(decryptedauth);\r\n\r\n    \r\n    \r\n       \r\n    \r\n    setIsAuthenticated(true);\r\n    const fetchTasks = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:3001/dashboard?id=${id}`);\r\n        const taskData = response.data.results;\r\n        const uniqueTasks = [...new Set(taskData.map(task => task.task_id))].map(id =>\r\n            taskData.find(task => task.task_id === id)\r\n          );\r\n\r\n        // Organize tasks based on their task_status\r\n        const organizedTasks = {\r\n            todo: [],\r\n            inProgress: [],\r\n            check: [],\r\n            finished: [],\r\n          };\r\n  \r\n          taskData.forEach(task => {\r\n            switch (task.task_status) {\r\n              case 1:\r\n                organizedTasks.todo.push(task);\r\n                break;\r\n              case 2:\r\n                organizedTasks.inProgress.push(task);\r\n                break;\r\n              case 3:\r\n                organizedTasks.check.push(task);\r\n                break;\r\n              case 4:\r\n                organizedTasks.finished.push(task);\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          });\r\n  \r\n          setTasks(organizedTasks);\r\n        } catch (error) {\r\n          console.error('Error fetching tasks:', error);\r\n        }\r\n      };\r\n  \r\n      fetchTasks();\r\n    }, [id]);\r\n\r\n  // Handle drag and drop functionality\r\n  const handleOnDragEnd = (result) => {\r\n    const { destination, source } = result;\r\n\r\n    if (!destination) return;\r\n\r\n    // If the task is dropped in the same position, do nothing\r\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\r\n      return;\r\n    }\r\n\r\n    const sourceColumn = source.droppableId;\r\n    const destinationColumn = destination.droppableId;\r\n\r\n    const movedTask = tasks[sourceColumn][source.index];\r\n\r\n    // Prevent dragging from 'check' to 'finished'\r\n    if (sourceColumn === 'check' && destinationColumn === 'finished') {\r\n      return;\r\n    }\r\n\r\n    // If task is being moved between columns\r\n    if (sourceColumn !== destinationColumn) {\r\n      const updatedSourceTasks = [...tasks[sourceColumn]];\r\n      const updatedDestinationTasks = [...tasks[destinationColumn]];\r\n\r\n      // Remove from the source and add to the destination\r\n      updatedSourceTasks.splice(source.index, 1);\r\n      updatedDestinationTasks.splice(destination.index, 0, movedTask);\r\n\r\n      setTasks({\r\n        ...tasks,\r\n        [sourceColumn]: updatedSourceTasks,\r\n        [destinationColumn]: updatedDestinationTasks,\r\n      });\r\n\r\n      // Optionally, send an API request to update task status on the server\r\n      movedTask.task_status = getColumnStatus(destinationColumn);\r\n      axios.put(`http://localhost:3001/dashboard?task_id=${movedTask.task_id}&task_status=${movedTask.task_status}`);\r\n    }\r\n  };\r\n\r\n  // Map column IDs to task statuses\r\n  const getColumnStatus = (columnId) => {\r\n    switch (columnId) {\r\n      case 'todo':\r\n        return 1;\r\n      case 'inProgress':\r\n        return 2;\r\n      case 'check':\r\n        return 3;\r\n      case 'finished':\r\n        return 4;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  // Handle logout by clearing localStorage and redirecting to login\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('isAuthenticated');\r\n    setIsAuthenticated(false); // This will redirect the user to the login page\r\n    navigate('/login');  // Use navigate instead of history.push\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <DragDropContext onDragEnd={handleOnDragEnd}>\r\n        <div className=\"columns\">\r\n          {/* To Do Column */}\r\n          <Droppable droppableId=\"todo\">\r\n            {(provided) => (\r\n              <div className=\"column\" ref={provided.innerRef} {...provided.droppableProps}>\r\n                <h2>To Do</h2>\r\n                {tasks.todo.map((task, index) => (\r\n                  <Draggable key={task.task_id} draggableId={String(task.task_id)} index={index}>\r\n                    {(provided) => (\r\n                      <div\r\n                        className=\"card\"\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                      >\r\n                        <div className=\"card-body\">\r\n                          <h5 className=\"card-title\">{task.task_name}</h5>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n\r\n          {/* In Progress Column */}\r\n          <Droppable droppableId=\"inProgress\">\r\n            {(provided) => (\r\n              <div className=\"column\" ref={provided.innerRef} {...provided.droppableProps}>\r\n                <h2>In Progress</h2>\r\n                {tasks.inProgress.map((task, index) => (\r\n                  <Draggable key={task.task_id} draggableId={String(task.task_id)} index={index}>\r\n                    {(provided) => (\r\n                      <div\r\n                        className=\"card\"\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                      >\r\n                        <div className=\"card-body\">\r\n                          <h5 className=\"card-title\">{task.task_name}</h5>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n\r\n          {/* Check Column */}\r\n          <Droppable droppableId=\"check\">\r\n            {(provided) => (\r\n              <div className=\"column\" ref={provided.innerRef} {...provided.droppableProps}>\r\n                <h2>Check</h2>\r\n                {tasks.check.map((task, index) => (\r\n                  <Draggable key={task.task_id} draggableId={String(task.task_id)} index={index}>\r\n                    {(provided) => (\r\n                      <div\r\n                        className=\"card\"\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                      >\r\n                        <div className=\"card-body\">\r\n                          <h5 className=\"card-title\">{task.task_name}</h5>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n\r\n          {/* Finished Column */}\r\n          <Droppable droppableId=\"finished\">\r\n            {(provided) => (\r\n              <div className=\"column\" ref={provided.innerRef} {...provided.droppableProps}>\r\n                <h2>Finished</h2>\r\n                {tasks.finished.map((task, index) => (\r\n                  <Draggable key={task.task_id} draggableId={String(task.task_id)} index={index}>\r\n                    {(provided) => (\r\n                      <div\r\n                        className=\"card\"\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                      >\r\n                        <div className=\"card-body\">\r\n                          <h5 className=\"card-title\">{task.task_name}</h5>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </div>\r\n      </DragDropContext>\r\n      <button onClick={() => setIsAuthenticated(false)}>Logout</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}